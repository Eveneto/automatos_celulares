"""
Exemplos de Regras Famosas de Aut√¥matos Celulares Elementares

Este script demonstra o uso de algumas das regras mais conhecidas e
interessantes dos aut√¥matos celulares elementares de Wolfram.
"""

import sys
import os

# Adicionar src ao path para imports
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from automato_elementar import AutomatoElementar
from visualizador import Visualizador
from classificador import ClassificadorWolfram
import matplotlib.pyplot as plt


def exemplo_regra_30():
    """
    Regra 30 - Comportamento Ca√≥tico
    
    A regra 30 √© uma das mais famosas por gerar padr√µes aparentemente
    aleat√≥rios. √â usada como gerador de n√∫meros pseudoaleat√≥rios.
    """
    print("=== REGRA 30 - COMPORTAMENTO CA√ìTICO ===")
    
    # Criar aut√¥mato
    automato = AutomatoElementar(regra=30, tamanho=101)
    automato.evoluir(geracoes=100)
    
    # Visualizar
    viz = Visualizador(automato)
    fig = viz.mostrar_evolucao()
    plt.title("Regra 30 - Padr√£o Ca√≥tico")
    plt.show()
    
    # Mostrar estat√≠sticas
    stats = automato.obter_estatisticas()
    print(f"Densidade final: {stats['densidade_final']:.3f}")
    print(f"Per√≠odo detectado: {stats['periodo_detectado']}")
    
    # Classifica√ß√£o
    classificador = ClassificadorWolfram()
    classe = classificador.classificar_regra(30)
    print(f"Classifica√ß√£o: {classe['nome_classe']}")
    print(f"Descri√ß√£o: {classe['descricao']}")
    print()


def exemplo_regra_90():
    """
    Regra 90 - Tri√¢ngulo de Sierpinski
    
    A regra 90 gera o famoso fractal conhecido como Tri√¢ngulo de Sierpinski.
    """
    print("=== REGRA 90 - TRI√ÇNGULO DE SIERPINSKI ===")
    
    # Criar aut√¥mato
    automato = AutomatoElementar(regra=90, tamanho=101)
    automato.evoluir(geracoes=80)
    
    # Visualizar
    viz = Visualizador(automato)
    viz.definir_esquema_cor('azul')
    fig = viz.mostrar_evolucao()
    plt.title("Regra 90 - Tri√¢ngulo de Sierpinski")
    plt.show()
    
    # Mostrar tabela da regra
    fig_regra = viz.mostrar_regra_binaria()
    plt.show()
    
    # Estat√≠sticas
    stats = automato.obter_estatisticas()
    print(f"Densidade final: {stats['densidade_final']:.3f}")
    print(f"Per√≠odo detectado: {stats['periodo_detectado']}")
    
    # Classifica√ß√£o
    classificador = ClassificadorWolfram()
    classe = classificador.classificar_regra(90)
    print(f"Classifica√ß√£o: {classe['nome_classe']}")
    print()


def exemplo_regra_110():
    """
    Regra 110 - Computa√ß√£o Universal
    
    A regra 110 √© uma das poucas regras elementares que demonstram
    computa√ß√£o universal, sendo capaz de simular qualquer computa√ß√£o.
    """
    print("=== REGRA 110 - COMPUTA√á√ÉO UNIVERSAL ===")
    
    # Criar aut√¥mato com estado inicial mais interessante
    automato = AutomatoElementar(regra=110, tamanho=101)
    
    # Estado inicial: algumas c√©lulas ativas espalhadas
    import numpy as np
    estado_inicial = np.zeros(101)
    estado_inicial[45:55] = [1, 1, 0, 1, 0, 1, 1, 0, 1, 0]
    automato.resetar(estado_inicial)
    
    automato.evoluir(geracoes=200)
    
    # Visualizar
    viz = Visualizador(automato)
    viz.definir_esquema_cor('verde')
    fig = viz.mostrar_evolucao()
    plt.title("Regra 110 - Estruturas Complexas")
    plt.show()
    
    # An√°lise de densidade
    fig_densidade = viz.plotar_densidade_temporal()
    plt.show()
    
    # Estat√≠sticas
    stats = automato.obter_estatisticas()
    print(f"Densidade final: {stats['densidade_final']:.3f}")
    print(f"Per√≠odo detectado: {stats['periodo_detectado']}")
    
    # Classifica√ß√£o
    classificador = ClassificadorWolfram()
    classe = classificador.classificar_regra(110)
    print(f"Classifica√ß√£o: {classe['nome_classe']}")
    print()


def exemplo_regra_150():
    """
    Regra 150 - Padr√µes Fractais
    
    A regra 150 produz padr√µes fractais interessantes e sim√©tricos.
    """
    print("=== REGRA 150 - PADR√ïES FRACTAIS ===")
    
    # Criar aut√¥mato
    automato = AutomatoElementar(regra=150, tamanho=101)
    automato.evoluir(geracoes=80)
    
    # Visualizar
    viz = Visualizador(automato)
    viz.definir_esquema_cor('roxo')
    fig = viz.mostrar_evolucao()
    plt.title("Regra 150 - Padr√µes Fractais")
    plt.show()
    
    # Estat√≠sticas
    stats = automato.obter_estatisticas()
    print(f"Densidade final: {stats['densidade_final']:.3f}")
    print(f"Per√≠odo detectado: {stats['periodo_detectado']}")
    print()


def exemplo_regra_184():
    """
    Regra 184 - Modelo de Tr√°fego
    
    A regra 184 pode ser interpretada como um modelo simples de tr√°fego,
    onde as c√©lulas ativas representam carros.
    """
    print("=== REGRA 184 - MODELO DE TR√ÅFEGO ===")
    
    # Criar aut√¥mato com densidade m√©dia de "carros"
    automato = AutomatoElementar(regra=184, tamanho=101)
    
    # Estado inicial: distribui√ß√£o aleat√≥ria de carros
    from src.utils import gerar_estado_aleatorio
    estado_inicial = gerar_estado_aleatorio(101, densidade=0.3, semente=42)
    automato.resetar(estado_inicial)
    
    automato.evoluir(geracoes=100)
    
    # Visualizar
    viz = Visualizador(automato)
    viz.definir_esquema_cor('vermelho')
    fig = viz.mostrar_evolucao()
    plt.title("Regra 184 - Fluxo de Tr√°fego")
    plt.show()
    
    # Criar anima√ß√£o
    print("Criando anima√ß√£o...")
    anim = viz.criar_animacao(intervalo=150)
    plt.show()
    
    # Estat√≠sticas
    stats = automato.obter_estatisticas()
    print(f"Densidade final: {stats['densidade_final']:.3f}")
    print(f"Per√≠odo detectado: {stats['periodo_detectado']}")
    print()


def comparacao_regras_por_classe():
    """
    Compara regras representativas de cada classe de Wolfram.
    """
    print("=== COMPARA√á√ÉO POR CLASSE DE WOLFRAM ===")
    
    # Regras representativas de cada classe
    regras_exemplo = {
        'Classe I (Homog√™neo)': 8,
        'Classe II (Peri√≥dico)': 150,
        'Classe III (Ca√≥tico)': 30,
        'Classe IV (Complexo)': 110
    }
    
    # Criar aut√¥mato base para compara√ß√£o
    automato_base = AutomatoElementar(regra=30, tamanho=101)  # Tempor√°rio
    viz = Visualizador(automato_base)
    
    # Comparar visualmente
    regras = list(regras_exemplo.values())
    fig = viz.comparar_regras(regras, geracoes=80)
    
    # Adicionar labels das classes
    axes = fig.get_axes()
    for i, (classe, regra) in enumerate(regras_exemplo.items()):
        axes[i].set_title(f'Regra {regra}\n{classe}', fontweight='bold')
    
    plt.suptitle('Compara√ß√£o das Classes de Wolfram', fontsize=16, fontweight='bold')
    plt.tight_layout()
    plt.show()
    
    # An√°lise estat√≠stica
    classificador = ClassificadorWolfram()
    
    print("An√°lise detalhada por classe:")
    for classe, regra in regras_exemplo.items():
        resultado = classificador.classificar_regra(regra)
        print(f"\n{classe}:")
        print(f"  Regra: {regra}")
        print(f"  Classifica√ß√£o: {resultado['nome_classe']}")
        print(f"  Confian√ßa: {resultado.get('confianca', 'N/A')}")
        if 'metricas' in resultado:
            metricas = resultado['metricas']
            print(f"  Homogeneidade: {metricas['homogeneidade']:.3f}")
            print(f"  Complexidade: {metricas['complexidade']:.3f}")
            print(f"  Estabilidade: {metricas['estabilidade']:.3f}")


def main():
    """Executa todos os exemplos."""
    print("üî¨ EXEMPLOS DE AUT√îMATOS CELULARES ELEMENTARES")
    print("=" * 50)
    
    try:
        # Executar exemplos individuais
        exemplo_regra_30()
        exemplo_regra_90()
        exemplo_regra_110()
        exemplo_regra_150()
        exemplo_regra_184()
        
        # Compara√ß√£o final
        comparacao_regras_por_classe()
        
        print("‚úÖ Todos os exemplos executados com sucesso!")
        print("\nPara explorar mais regras, experimente modificar os n√∫meros")
        print("das regras nos exemplos acima (valores de 0 a 255).")
        
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")
        print("Verifique se todas as depend√™ncias est√£o instaladas:")
        print("pip install numpy matplotlib pillow")


if __name__ == "__main__":
    main()
